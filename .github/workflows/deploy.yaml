name: Deploy

on:
  push:
    branches:
      - main

env:
  GITHUB_SHA: ${{ github.sha }}
  GCLOUD_PROJECT: nackswinget-af7ef
  GCLOUD_REGION: europe-north1
  GCLOUD_SCHEDULER_REGION: europe-west6
  GCLOUD_BUCKET: nackswinget-af7ef.appspot.com
  TZ: Europe/Stockholm

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build source
        run: npm run build --if-present

      - name: Test
        run: npm run test --if-present

  deploy-notifications-api:
    runs-on: ubuntu-latest
    needs: 'build'
    concurrency: 'notifications-api'
    strategy:
      matrix:
        node-version: [20.x]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build source
        run: npm run build --if-present

      - id: 'auth'
        name: Setup  gcloud Cloud SDK auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/560237127162/locations/global/workloadIdentityPools/github-deployer-auth-pool/providers/github-deployer-auth-provider'
          service_account: 'github-deployer-account@nackswinget-af7ef.iam.gserviceaccount.com'

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup default project (${{ env.GCLOUD_PROJECT }})
        run: gcloud config set project "${GCLOUD_PROJECT}"

      - name: Deploy notifications-api
        run: |
          gcloud functions deploy notifications-api \
            --gen2 \
            --runtime=nodejs20 \
            --region="${GCLOUD_REGION}" \
            --source=. \
            --entry-point=notifications-api \
            --trigger-http \
            --max-instances=10 \
            --allow-unauthenticated \
            --update-secrets=ACTIVITY_ORG_ID=ACTIVITY_ORG_ID:latest,ACTIVITY_BASE_URL=ACTIVITY_BASE_URL:latest,ACTIVITY_USERNAME=ACTIVITY_USERNAME:latest,ACTIVITY_PASSWORD=ACTIVITY_PASSWORD:latest \
            --update-env-vars=GCLOUD_PROJECT=${GCLOUD_PROJECT},GCLOUD_BUCKET=${GCLOUD_BUCKET},GCLOUD_REGION=${GCLOUD_REGION},GITHUB_SHA=${GITHUB_SHA}

  deploy-competitions-api:
    runs-on: ubuntu-latest
    needs: 'build'
    concurrency: 'competitions-api'
    strategy:
      matrix:
        node-version: [20.x]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build source
        run: npm run build --if-present

      - id: 'auth'
        name: Setup  gcloud Cloud SDK auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/560237127162/locations/global/workloadIdentityPools/github-deployer-auth-pool/providers/github-deployer-auth-provider'
          service_account: 'github-deployer-account@nackswinget-af7ef.iam.gserviceaccount.com'

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup default project (${{ env.GCLOUD_PROJECT }})
        run: gcloud config set project "${GCLOUD_PROJECT}"

      - name: Deploy competitions-api
        run: |
          gcloud functions deploy competitions-api \
            --gen2 \
            --runtime=nodejs20 \
            --region="${GCLOUD_REGION}" \
            --source=. \
            --entry-point=competitions-api \
            --trigger-http \
            --max-instances=10 \
            --allow-unauthenticated \
            --update-env-vars=GITHUB_SHA=${GITHUB_SHA}

  deploy-news-api:
    runs-on: ubuntu-latest
    needs: 'build'
    concurrency: 'news-api'
    strategy:
      matrix:
        node-version: [20.x]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build source
        run: npm run build --if-present

      - id: 'auth'
        name: Setup  gcloud Cloud SDK auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/560237127162/locations/global/workloadIdentityPools/github-deployer-auth-pool/providers/github-deployer-auth-provider'
          service_account: 'github-deployer-account@nackswinget-af7ef.iam.gserviceaccount.com'

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup default project (${{ env.GCLOUD_PROJECT }})
        run: gcloud config set project "${GCLOUD_PROJECT}"

      - name: Deploy news-api
        run: |
          gcloud functions deploy news-api \
            --gen2 \
            --runtime=nodejs20 \
            --region="${GCLOUD_REGION}" \
            --source=. \
            --entry-point=news-api \
            --trigger-http \
            --max-instances=10 \
            --allow-unauthenticated \
            --update-env-vars=GCLOUD_PROJECT=${GCLOUD_PROJECT},GCLOUD_BUCKET=${GCLOUD_BUCKET},GCLOUD_REGION=${GCLOUD_REGION},GITHUB_SHA=${GITHUB_SHA}

  deploy-calendar-api:
    runs-on: ubuntu-latest
    needs: 'build'
    concurrency: 'calendar-api'
    strategy:
      matrix:
        node-version: [20.x]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build source
        run: npm run build --if-present

      - id: 'auth'
        name: Setup  gcloud Cloud SDK auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/560237127162/locations/global/workloadIdentityPools/github-deployer-auth-pool/providers/github-deployer-auth-provider'
          service_account: 'github-deployer-account@nackswinget-af7ef.iam.gserviceaccount.com'

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup default project (${{ env.GCLOUD_PROJECT }})
        run: gcloud config set project "${GCLOUD_PROJECT}"

      - name: Deploy calendars-api
        run: |
          gcloud functions deploy calendars-api \
            --gen2 \
            --runtime=nodejs20 \
            --region="${GCLOUD_REGION}" \
            --source=. \
            --entry-point=calendars-api \
            --trigger-http \
            --max-instances=10 \
            --allow-unauthenticated \
            --update-secrets=ACTIVITY_ORG_ID=ACTIVITY_ORG_ID:latest,ACTIVITY_BASE_URL=ACTIVITY_BASE_URL:latest,ACTIVITY_USERNAME=ACTIVITY_USERNAME:latest,ACTIVITY_PASSWORD=ACTIVITY_PASSWORD:latest \
            --update-env-vars=GCLOUD_PROJECT=${GCLOUD_PROJECT},GCLOUD_BUCKET=${GCLOUD_BUCKET},GCLOUD_REGION=${GCLOUD_REGION},GITHUB_SHA=${GITHUB_SHA}

      - name: Send deploy message to slack
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          YYYYMMDD=$(date '+%Y-%m-%d %H:%M:%S %z')
          MESSAGE=" ðŸš¢ ${YYYYMMDD} NSW calendars-api has been deployed!"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MESSAGE}\"}" ${SLACK_WEBHOOK}

  deploy-calendar-update-api:
    runs-on: ubuntu-latest
    needs: 'build'
    concurrency: 'calendar-update-api'
    strategy:
      matrix:
        node-version: [20.x]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build source
        run: npm run build --if-present

      - id: 'auth'
        name: Setup  gcloud Cloud SDK auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/560237127162/locations/global/workloadIdentityPools/github-deployer-auth-pool/providers/github-deployer-auth-provider'
          service_account: 'github-deployer-account@nackswinget-af7ef.iam.gserviceaccount.com'

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup default project (${{ env.GCLOUD_PROJECT }})
        run: gcloud config set project "${GCLOUD_PROJECT}"

      - name: Deploy calendars-update-api
        run: |
          gcloud functions deploy calendars-update-api \
            --gen2 \
            --runtime=nodejs20 \
            --region="${GCLOUD_REGION}" \
            --source=. \
            --entry-point=calendars-update-api \
            --trigger-http \
            --memory=1GiB \
            --max-instances=1 \
            --concurrency=1 \
            --allow-unauthenticated \
            --update-secrets=ACTIVITY_ORG_ID=ACTIVITY_ORG_ID:latest,ACTIVITY_BASE_URL=ACTIVITY_BASE_URL:latest,ACTIVITY_USERNAME=ACTIVITY_USERNAME:latest,ACTIVITY_PASSWORD=ACTIVITY_PASSWORD:latest \
            --update-env-vars=GCLOUD_PROJECT=${GCLOUD_PROJECT},GCLOUD_BUCKET=${GCLOUD_BUCKET},GCLOUD_REGION=${GCLOUD_REGION},GITHUB_SHA=${GITHUB_SHA}

      - name: Send deploy message to slack
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          YYYYMMDD=$(date '+%Y-%m-%d %H:%M:%S %z')
          MESSAGE=" ðŸš¢ ${YYYYMMDD} NSW calendars-update-api has been deployed!"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MESSAGE}\"}" ${SLACK_WEBHOOK}

  update-scheduler:
    runs-on: ubuntu-latest
    needs:
      - "deploy-calendar-api"
      - "deploy-calendar-update-api"

    concurrency: 'scheduler'

    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - id: 'auth'
        name: Setup  gcloud Cloud SDK auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/560237127162/locations/global/workloadIdentityPools/github-deployer-auth-pool/providers/github-deployer-auth-provider'
          service_account: 'github-deployer-account@nackswinget-af7ef.iam.gserviceaccount.com'

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup default project (${{ env.GCLOUD_PROJECT }})
        run: gcloud config set project "${GCLOUD_PROJECT}"

      - name: Update scheduler calendar-update-lean-5m
        run: |
          gcloud scheduler jobs update http calendar-update-lean-5m \
            --schedule "*/5 0-1,7-23 * * *" \
            --time-zone "Europe/Stockholm" \
            --http-method POST \
            --uri $(gcloud functions describe calendars-api --gen2 --format='value(serviceConfig.uri)' --region=${GCLOUD_REGION})/update \
            --location ${GCLOUD_SCHEDULER_REGION} \
            --description "calendars-api: Lean update NSW GCS .ics files (5m)"

      - name: Update scheduler calendar-auth-update
        run: |
          CRON_PATTERN="$(( RANDOM % 61 )) 0-1/2,6-23/2 * * *"
          echo "Scheduling at ${CRON_PATTERN}"
          gcloud scheduler jobs update http calendar-auth-update \
            --schedule "${CRON_PATTERN}" \
            --time-zone "Europe/Stockholm" \
            --http-method POST \
            --uri $(gcloud functions describe calendars-update-api --gen2 --format='value(serviceConfig.uri)' --region="${GCLOUD_REGION}") \
            --location ${GCLOUD_SCHEDULER_REGION} \
            --max-retry-attempts 3 \
            --min-backoff 1m \
            --description "calendar-auth-update: Update NSW with full auth and refreshing all calendars"

      - name: Update scheduler news-update
        run: |
          CRON_PATTERN="*/30 * * * *"
          echo "Scheduling at ${CRON_PATTERN}"
          gcloud scheduler jobs update http news-update \
            --schedule "${CRON_PATTERN}" \
            --time-zone "Europe/Stockholm" \
            --http-method POST \
            --uri $(gcloud functions describe news-api --gen2 --format='value(serviceConfig.uri)' --region="${GCLOUD_REGION}")/update \
            --location ${GCLOUD_SCHEDULER_REGION} \
            --max-retry-attempts 3 \
            --min-backoff 1m \
            --description "news-update: Update NSW news"

      - name: Trigger update
        run: |
          curl -v -X POST $(gcloud functions describe calendars-update-api --gen2 --format='value(serviceConfig.uri)' --region=${GCLOUD_REGION})

  clean-artifacts:
    runs-on: ubuntu-latest
    needs:
      - "deploy-notifications-api"
      - "deploy-competitions-api"
      - "deploy-calendar-api"
      - "deploy-calendar-update-api"
      - "deploy-news-api"

    concurrency: 'cleanup'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4

      - id: 'auth'
        name: Setup  gcloud Cloud SDK auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/560237127162/locations/global/workloadIdentityPools/github-deployer-auth-pool/providers/github-deployer-auth-provider'
          service_account: 'github-deployer-account@nackswinget-af7ef.iam.gserviceaccount.com'

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup default project (${{ env.GCLOUD_PROJECT }})
        run: gcloud config set project "${GCLOUD_PROJECT}"

      - name: Clean cloud functions artifacts
        run: |
          ./clean-artifacts.sh

  build-apps-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: apps/mobile/package-lock.json

      - name: Install deps
        run: npm -C apps/mobile ci

      - name: Build source
        run: npm -C apps/mobile run build

      - name: Package webapp
        working-directory: apps/mobile
        run: npx cap sync android

      - uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 18
          cache: gradle

      - name: Test https androidpublisher connection
        run: curl --head -v https://androidpublisher.googleapis.com/androidpublisher/v3/applications/org.nackswinget.app/

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - id: 'auth'
        name: Setup  gcloud Cloud SDK auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/560237127162/locations/global/workloadIdentityPools/github-deployer-auth-pool/providers/github-deployer-auth-provider'
          service_account: 'github-deployer-account@nackswinget-af7ef.iam.gserviceaccount.com'
          create_credentials_file: true

      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2

      - name: Fetch and Write GOOGLE_PLAY_KEYSTORE
        run: |
          gcloud secrets versions access latest --secret="GOOGLE_PLAY_KEYSTORE" --out-file /tmp/google_play_keystore

      - name: Fetch and Write GOOGLE_PLAY_KEYSTORE_SETTINGS
        run: |
          gcloud secrets versions access latest --secret="GOOGLE_PLAY_KEYSTORE_SETTINGS" --out-file apps/mobile/android/app/keystore.properties

      - name: Build with Gradle
        run: npm -C apps/mobile run android:build

      - name: Build info
        working-directory: apps/mobile/android
        run: |
          ./gradlew buildEnvironment app:buildEnvironment | grep 'com.github.triplet'; \
          ./gradlew -v | grep 'Gradle'; \
          ./gradlew buildEnvironment | grep 'com.android.tools.build:gradle:'

      - name: Build and upload with Gradle
        run: npm -C apps/mobile run android:upload